<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:batch="http://www.springframework.org/schema/batch"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd
        http://www.springframework.org/schema/batch http://www.springframework.org/schema/batch/spring-batch-2.2.xsd
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
        http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.2.xsd">

	<context:component-scan base-package="com.sopragroup.*" />

	<!-- Transaction Manager -->
	<beans:bean id="transactionManager"
		class="org.springframework.batch.support.transaction.ResourcelessTransactionManager" />

	<!-- Job repository -->
	<beans:bean id="jobRepository"
		class="org.springframework.batch.core.repository.support.MapJobRepositoryFactoryBean">
		<beans:property name="transactionManager" ref="transactionManager" />
	</beans:bean>

	<!-- Job launcher -->
	<beans:bean id="jobLauncher"
		class="org.springframework.batch.core.launch.support.SimpleJobLauncher">
		<beans:property name="jobRepository" ref="jobRepository" />
	</beans:bean>



	<!-- Data source -->
	<beans:bean id="dataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<beans:property name="driverClassName" value="org.hsqldb.jdbcDriver" />
		<beans:property name="url"
			value="jdbc:hsqldb:mem:testdb;sql.enforce_strict_size=true" />
		<beans:property name="username" value="sa" />
	</beans:bean>
	
	<jdbc:initialize-database data-source="dataSource">
		<jdbc:script location="initBase.sql" />
	</jdbc:initialize-database>



	<!-- Item Reader -->
	<beans:bean id="djiaReader"
		class="org.springframework.batch.item.file.FlatFileItemReader" scope="step">
		<beans:property name="resource"
			value="file://#{jobExecutionContext['fileName']}" />
		<beans:property name="linesToSkip" value="1" />
		<beans:property name="lineMapper">
			<beans:bean
				class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
				<beans:property name="lineTokenizer">
					<beans:bean
						class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
						<beans:property name="delimiter" value="," />
					</beans:bean>
				</beans:property>
				<beans:property name="fieldSetMapper" ref="djiaFSMapper" />
			</beans:bean>
		</beans:property>
	</beans:bean>

	<!-- Item Writer -->
	<beans:bean id="djiaWriter"
		class="org.springframework.batch.item.database.JdbcBatchItemWriter">
		<beans:property name="dataSource" ref="dataSource" />
		<beans:property name="sql">
			<beans:value>
			<![CDATA[        
			insert into djia(date, open, high, low, close, volume, adjclose, direction) 
			values (:date, :open, :high, :low, :close, :volume, :adjclose, :direction)
			]]>
			</beans:value>
		</beans:property>
		<beans:property name="itemSqlParameterSourceProvider">
			<beans:bean
				class="org.springframework.batch.item.database.BeanPropertyItemSqlParameterSourceProvider" />
		</beans:property>
	</beans:bean>

	<!-- Tasklet -->
	<beans:bean id="fileDeleteTasklet"
		class="com.sopragroup.springbatchdemo.tasket.FileDeleteTasklet" scope="step">
		<beans:property name="fileName"
			value="#{jobExecutionContext['fileName']}" />
	</beans:bean>

	<!-- Job -->
	<!-- Lire les données dans un fichier CSV et les charger dans une base de 
		données  -->
	<batch:job id="demo2Batch">

		<!-- Recupération du fichier CSV -->
		<batch:step id="fileCopyStep" next="loadStep">
			<batch:tasklet ref="fileCopyTasklet" />
			<batch:listeners>
				<batch:listener>
					<beans:bean
						class="org.springframework.batch.core.listener.ExecutionContextPromotionListener">
						<beans:property name="keys" value="fileName" />
					</beans:bean>
				</batch:listener>
			</batch:listeners>
		</batch:step>

		<!-- Chargement du fichier CSV en base de données -->
		<batch:step id="loadStep">
			<batch:tasklet>
				<batch:chunk reader="djiaReader" processor="complexDjiaProcessor"
	writer="djiaWriter" commit-interval="1000" />
			</batch:tasklet>
			<batch:next on="*" to="fileDeleteStep" />
			<batch:next on="FAILED" to="showErrorStep" />

		</batch:step>

		<!-- Suppresion du fichier CVS temporaire -->
		<batch:step id="fileDeleteStep">
			<batch:tasklet ref="fileDeleteTasklet" />
		</batch:step>
		
		<!-- Affichage d'un message d'erreur dans la console -->
		<batch:step id="showErrorStep">
			<batch:tasklet ref="showErrorTasklet" />
		</batch:step>
	</batch:job>

</beans:beans>